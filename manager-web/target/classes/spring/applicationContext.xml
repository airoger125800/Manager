<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">

	<!-- 配置扫描 -->
	<context:component-scan base-package="service,serviceImpl">
		<!-- 排除controller注解
			controller注解的作用是声明控制器，我们用springmvc框架管理
		 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<context:property-placeholder location="classpath:resource/*.properties"/>
	
	<!-- 配置mybatis -->
	
	<!-- 配置数据库连接池 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="driverClassName" value="${db.driver}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	
	<!-- 配置mybatis核心工程 -->
	<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-context.xml"></property>
		<!-- 指定数据库连接池 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 读取mapper.xml文件位置-->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>

	</bean>
	
	<!-- 配置mapper动态代理开发扫描 想要自动注入mapper对象就必须配置下面这个-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="mapper"></property>
	</bean>
	
	<!-- 为了保证数据操作的一致性，必须加入事务处理
		 spring框架采用声明式事务，通过aop的方式将事务加到业务中，所以需要在spring配置文件中添加相关配置
	 -->
	<!-- 事务核心管理器，封装了所有的事务操作，依赖于连接池  -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="query*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置织入 -->
	<aop:config>
		<aop:pointcut expression="execution(* service..*Service.*(..))" id="txpc"/>
		<!-- 配置切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txpc"/>
	</aop:config>
	
</beans>
